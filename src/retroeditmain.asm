;
; File generated by cc65 v 2.18 - Git f8be35b
;
	.fopt		compiler,"cc65 v 2.18 - Git f8be35b"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_realloc
	.import		_printf
	.import		_clrscr
	.import		_gotoxy
	.import		_cputc
	.import		_cgetc
	.import		_cursor
	.import		_textcolor
	.import		_bgcolor
	.import		_bordercolor
	.import		_screensize
	.export		__lineBuffer
	.export		__workingLineBuffer
	.export		__editorLines
	.export		__editorLinesCapacity
	.export		__editorLineSegments
	.export		__firstFreeSegment
	.export		__maxLineSegment
	.export		__textPos
	.export		__screenSize
	.export		__statusBarLineNo
	.export		__debugLineNo
	.export		__maxLine
	.import		_PetAsciiToScreenCode
	.export		_UpdateDocInfo
	.export		_EnsureEditorLinesCapacity
	.export		_Initialize
	.export		_PrintLineNumber
	.export		_GetNextFreeLineSegment
	.export		_SaveBufferToEditorMemory
	.export		_GetBufferFromEditorMemoryAndPrint
	.export		_GetWorkingLine
	.export		_Invalidate
	.export		_LineBufferToCurrentScreenLine
	.export		_CursorLeft
	.export		_CursorRight
	.export		_DeleteLine
	.export		_InsertChar
	.export		_DeleteChar
	.export		_Backspace
	.export		_CursorUp
	.export		_CursorDown
	.export		_HandleReturnKey
	.export		_main

.segment	"RODATA"

L0026:
	.byte	$CC,$53,$2A,$3A,$20,$25,$D8,$2F,$25,$D8,$00
L001D:
	.byte	$CB,$C3,$3A,$20,$25,$30,$33,$44,$00
L0016	:=	L001D+1
L000F:
	.byte	$CC,$3A,$20,$25,$30,$35,$44,$00
L0132:
	.byte	$25,$30,$34,$44,$21,$00
L0074:
	.byte	$25,$30,$34,$44,$3A,$00

.segment	"BSS"

__lineBuffer:
	.res	160,$00
__workingLineBuffer:
	.res	160,$00
__editorLines:
	.res	2,$00
__editorLinesCapacity:
	.res	2,$00
__editorLineSegments:
	.res	2,$00
__firstFreeSegment:
	.res	2,$00
__maxLineSegment:
	.res	2,$00
__textPos:
	.res	6,$00
__screenSize:
	.res	7,$00
__statusBarLineNo:
	.res	1,$00
__debugLineNo:
	.res	1,$00
__maxLine:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ UpdateDocInfo (int, int, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateDocInfo: near

.segment	"CODE"

	jsr     pusha
	lda     __editorLineSegments
	ldx     __editorLineSegments+1
	jsr     pushax
	lda     #$01
	jsr     pusha
	lda     __statusBarLineNo
	jsr     _gotoxy
	lda     #<(L000F)
	ldx     #>(L000F)
	jsr     pushax
	ldy     #$0A
	jsr     pushwysp
	ldy     #$04
	jsr     _printf
	lda     #$0A
	jsr     pusha
	lda     __statusBarLineNo
	jsr     _gotoxy
	lda     #<(L0016)
	ldx     #>(L0016)
	jsr     pushax
	ldy     #$08
	jsr     pushwysp
	ldy     #$04
	jsr     _printf
	lda     #$14
	jsr     pusha
	lda     __statusBarLineNo
	jsr     _gotoxy
	lda     #<(L001D)
	ldx     #>(L001D)
	jsr     pushax
	ldy     #$04
	lda     (sp),y
	jsr     pusha0
	ldy     #$04
	jsr     _printf
	lda     #$1C
	jsr     pusha
	lda     __statusBarLineNo
	jsr     _gotoxy
	lda     __maxLineSegment
	ldx     __maxLineSegment+1
	jsr     pushax
	lda     #$0C
	jsr     tosumula0
	jsr     addeq0sp
	lda     #<(L0026)
	ldx     #>(L0026)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	lda     __firstFreeSegment
	ldx     __firstFreeSegment+1
	jsr     pushax
	ldy     #$06
	jsr     _printf
	lda     __textPos+4
	clc
	adc     #$06
	jsr     pusha
	lda     __textPos+3
	clc
	adc     __screenSize+4
	jsr     _gotoxy
	jmp     incsp7

.endproc

; ---------------------------------------------------------------
; void __near__ EnsureEditorLinesCapacity (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_EnsureEditorLinesCapacity: near

.segment	"CODE"

	jsr     pusha
	lda     __maxLine
	sec
	sbc     __editorLinesCapacity
	sta     tmp1
	lda     __maxLine+1
	sbc     __editorLinesCapacity+1
	ora     tmp1
	beq     L0299
	bcs     L029B
L0299:	ldy     #$00
	lda     (sp),y
	cmp     #$01
	jne     incsp1
L029B:	lda     __editorLinesCapacity
	clc
	adc     __editorLinesCapacity
	sta     __editorLinesCapacity
	lda     __editorLinesCapacity+1
	adc     __editorLinesCapacity+1
	sta     __editorLinesCapacity+1
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __editorLinesCapacity
	ldx     __editorLinesCapacity+1
	jsr     mulax3
	jsr     _realloc
	sta     __editorLines
	stx     __editorLines+1
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ Initialize (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Initialize: near

.segment	"CODE"

	lda     #$00
	sta     __maxLine
	sta     __maxLine+1
	sta     __textPos+2
	sta     __textPos
	sta     __textPos+1
	sta     __textPos+4
	sta     __textPos+3
	jsr     _bgcolor
	lda     #$00
	jsr     _bordercolor
	lda     #$0D
	jsr     _textcolor
	ldx     #$00
	lda     #$04
	sta     __editorLinesCapacity
	stx     __editorLinesCapacity+1
	lda     #$01
	jsr     _EnsureEditorLinesCapacity
	lda     #<(__screenSize+3)
	ldx     #>(__screenSize+3)
	jsr     pushax
	lda     #<(__screenSize+2)
	ldx     #>(__screenSize+2)
	jsr     _screensize
	lda     __screenSize+3
	sec
	sbc     #$06
	bcs     L029D
	sec
L029D:	sbc     #$01
	sta     __screenSize
	lda     #$05
	sta     __screenSize+6
	lda     __screenSize+2
	sec
	sbc     #$01
	sta     __statusBarLineNo
	lda     #$01
	sta     __screenSize+4
	lda     __screenSize+2
	sec
	sbc     #$02
	sta     __screenSize+5
	sec
	sbc     __screenSize+4
	sta     __screenSize+1
	lda     __screenSize+2
	sec
	sbc     #$02
	sta     __debugLineNo
	jsr     _clrscr
	lda     #$01
	jsr     _cursor
	lda     #$00
	sta     __maxLineSegment
	sta     __maxLineSegment+1
	ldx     #$C0
	sta     __editorLineSegments
	stx     __editorLineSegments+1
	sta     __firstFreeSegment
	sta     __firstFreeSegment+1
	lda     #$06
	jsr     pusha
	lda     __textPos+3
	clc
	adc     __screenSize+4
	jmp     _gotoxy

.endproc

; ---------------------------------------------------------------
; void __near__ PrintLineNumber (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_PrintLineNumber: near

.segment	"CODE"

	lda     #$00
	jsr     pusha
	lda     __textPos+3
	clc
	adc     __screenSize+4
	jsr     _gotoxy
	lda     #<(L0074)
	ldx     #>(L0074)
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	clc
	adc     #$01
	bcc     L0077
	inx
L0077:	jsr     pushax
	ldy     #$04
	jmp     _printf

.endproc

; ---------------------------------------------------------------
; __near__ struct LineSegment * __near__ GetNextFreeLineSegment (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetNextFreeLineSegment: near

.segment	"CODE"

	jsr     decsp2
	lda     __firstFreeSegment
	ora     __firstFreeSegment+1
	bne     L0079
	lda     __editorLineSegments
	ldx     __editorLineSegments+1
	jsr     pushax
	lda     __maxLineSegment
	ldx     __maxLineSegment+1
	jsr     pushax
	lda     #$0C
	jsr     tosmula0
	jsr     tosaddax
	jsr     stax0sp
	lda     __maxLineSegment
	ldx     __maxLineSegment+1
	clc
	adc     #$01
	bcc     L007F
	inx
L007F:	sta     __maxLineSegment
	stx     __maxLineSegment+1
	jmp     L0080
L0079:	lda     __firstFreeSegment
	ldx     __firstFreeSegment+1
	jsr     stax0sp
	lda     __firstFreeSegment+1
	sta     ptr1+1
	lda     __firstFreeSegment
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	sta     __firstFreeSegment+1
	dey
	lda     (ptr1),y
	sta     __firstFreeSegment
L0080:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ SaveBufferToEditorMemory (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SaveBufferToEditorMemory: near

.segment	"CODE"

	jsr     decsp6
	lda     #$00
	jsr     _EnsureEditorLinesCapacity
	jsr     _GetNextFreeLineSegment
	jsr     stax0sp
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	iny
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	lda     #$00
	ldy     #$05
	sta     (sp),y
	dey
L02A1:	sta     (sp),y
	cmp     __textPos+5
	bcs     L0091
	iny
	lda     (sp),y
	cmp     #$0A
	bne     L0098
	jsr     _GetNextFreeLineSegment
	ldy     #$02
	jsr     staxysp
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$0A
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     stax0sp
	lda     #$00
	ldy     #$05
	sta     (sp),y
L0098:	jsr     pushw0sp
	ldy     #$07
	lda     (sp),y
	pha
	clc
	adc     #$01
	sta     (sp),y
	pla
	jsr     tosadda0
	jsr     pushax
	ldy     #$06
	lda     (sp),y
	tay
	lda     __lineBuffer,y
	ldy     #$00
	jsr     staspidx
	ldy     #$04
	lda     (sp),y
	clc
	adc     #$01
	jmp     L02A1
L0091:	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	lda     __textPos+5
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	tya
	ldy     #$0A
	sta     (ptr1),y
	iny
	sta     (ptr1),y
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ GetBufferFromEditorMemoryAndPrint (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetBufferFromEditorMemoryAndPrint: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp8
	ldy     #$08
	lda     (sp),y
	jne     L02A5
	lda     __firstFreeSegment
	ora     __firstFreeSegment+1
	beq     L00AF
	lda     __firstFreeSegment
	ldx     __firstFreeSegment+1
	jmp     L02AA
L00B4:	ldy     #$05
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
L02AA:	ldy     #$04
	jsr     staxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$0B
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cpx     #$00
	bne     L00B4
	cmp     #$00
	bne     L00B4
	ldy     #$07
	jsr     pushwysp
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	ldy     #$0A
	jsr     staxspidx
	jmp     L02A5
L00AF:	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sta     __firstFreeSegment+1
	dey
	lda     (ptr1),y
	sta     __firstFreeSegment
L02A5:	lda     __textPos+2
	sec
	sbc     __textPos+4
	ldy     #$00
	sta     (sp),y
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	ldy     #$06
	jsr     staxysp
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$03
	sta     (sp),y
	sta     __textPos+5
	lda     #$00
	dey
	sta     (sp),y
	lda     #$06
	jsr     pusha
	lda     __textPos+3
	clc
	adc     __screenSize+4
	jsr     _gotoxy
	lda     #$00
	ldy     #$01
L02AB:	sta     (sp),y
	cmp     #$A0
	jcs     L00D2
	lda     (sp),y
	ldy     #$03
	cmp     (sp),y
	bcs     L00D9
	lda     #<(__lineBuffer)
	ldx     #>(__lineBuffer)
	ldy     #$01
	clc
	adc     (sp),y
	bcc     L00DD
	inx
L00DD:	jsr     pushax
	ldy     #$0B
	jsr     pushwysp
	ldy     #$06
	lda     (sp),y
	pha
	clc
	adc     #$01
	sta     (sp),y
	pla
	jsr     tosadda0
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     staspidx
	ldy     #$02
	lda     (sp),y
	cmp     #$0A
	bne     L00E6
	ldy     #$07
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	ldy     #$06
	jsr     staxysp
	lda     #$00
	ldy     #$02
	sta     (sp),y
	jmp     L00E6
L00D9:	ldy     #$01
	lda     (sp),y
	tay
	lda     #$20
	sta     __lineBuffer,y
L00E6:	ldy     #$01
	lda     (sp),y
	dey
	cmp     (sp),y
	bcc     L00D3
	iny
	lda     (sp),y
	jsr     pusha0
	ldy     #$02
	lda     (sp),y
	clc
	adc     __screenSize
	bcc     L02A3
	ldx     #$01
L02A3:	jsr     tosicmp
	bcc     L00EC
	bne     L00D3
L00EC:	ldy     #$01
	lda     (sp),y
	tay
	lda     __lineBuffer,y
	jsr     _cputc
L00D3:	ldy     #$01
	lda     (sp),y
	clc
	adc     #$01
	jmp     L02AB
L00D2:	ldy     #$09
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ GetWorkingLine (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetWorkingLine: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp5
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	ldy     #$08
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     stax0sp
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	ldy     #$08
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$03
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	ldy     #$04
L02AE:	sta     (sp),y
	cmp     #$A0
	bcs     L00FE
	lda     (sp),y
	dey
	cmp     (sp),y
	bcs     L0105
	lda     #<(__workingLineBuffer)
	ldx     #>(__workingLineBuffer)
	iny
	clc
	adc     (sp),y
	bcc     L0109
	inx
L0109:	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	ldy     #$06
	lda     (sp),y
	pha
	clc
	adc     #$01
	sta     (sp),y
	pla
	jsr     tosadda0
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     staspidx
	ldy     #$02
	lda     (sp),y
	cmp     #$0A
	bne     L00FF
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     stax0sp
	lda     #$00
	ldy     #$02
	sta     (sp),y
	jmp     L00FF
L0105:	iny
	lda     (sp),y
	tay
	lda     #$20
	sta     __workingLineBuffer,y
L00FF:	ldy     #$04
	lda     (sp),y
	clc
	adc     #$01
	jmp     L02AE
L00FE:	dey
	lda     (sp),y
	ldx     #$00
	jmp     incsp7

.endproc

; ---------------------------------------------------------------
; void __near__ Invalidate (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Invalidate: near

.segment	"CODE"

	jsr     pushax
	ldy     #$0B
	jsr     subysp
	lda     __screenSize+3
	jsr     pusha0
	lda     __screenSize+4
	jsr     tosumula0
	pha
	txa
	clc
	adc     #$04
	tax
	pla
	clc
	adc     #$06
	bcc     L011B
	inx
L011B:	ldy     #$02
	jsr     staxysp
	lda     __textPos+2
	sec
	sbc     __textPos+4
	ldy     #$05
	sta     (sp),y
	clc
	adc     __screenSize
	dey
	sta     (sp),y
	lda     __textPos
	sec
	sbc     __textPos+3
	pha
	lda     __textPos+1
	sbc     #$00
	pla
	ldy     #$08
	sta     (sp),y
	clc
	adc     __screenSize+1
	dey
	sta     (sp),y
	iny
	lda     (sp),y
	iny
	sta     (sp),y
	ldx     #$00
L02B7:	lda     (sp),y
	ldy     #$07
	cmp     (sp),y
	jcs     L02BE
	ldy     #$09
	lda     (sp),y
	sec
	sbc     __maxLine
	sta     tmp1
	txa
	sbc     __maxLine+1
	ora     tmp1
	beq     L02B8
	jcs     L012C
	txa
L02B8:	jsr     pusha
	ldy     #$0A
	lda     (sp),y
	clc
	adc     __screenSize+4
	jsr     _gotoxy
	lda     #<(L0132)
	ldx     #>(L0132)
	jsr     pushax
	ldy     #$0B
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0135
	inx
L0135:	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #$06
	jsr     pusha
	ldy     #$0A
	lda     (sp),y
	clc
	adc     __screenSize+4
	jsr     _gotoxy
	ldy     #$0B
	lda     (sp),y
	iny
	ora     (sp),y
	beq     L0139
	ldy     #$09
	lda     (sp),y
	cmp     __textPos+3
	bne     L02C0
	ldy     #$0C
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     stax0sp
	lda     __textPos+5
	ldy     #$06
	sta     (sp),y
	jmp     L0142
L0139:	ldy     #$09
L02C0:	lda     (sp),y
	ldx     #$00
	jsr     _GetWorkingLine
	ldy     #$06
	sta     (sp),y
	lda     #<(__workingLineBuffer)
	ldx     #>(__workingLineBuffer)
	jsr     stax0sp
L0142:	ldy     #$05
	lda     (sp),y
	ldy     #$0A
L02C1:	sta     (sp),y
	sec
	ldy     #$04
	sbc     (sp),y
	bcc     L014B
	bne     L0157
L014B:	dey
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0151
	inx
L0151:	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0C
	lda     (sp),y
	tay
	lda     (ptr1),y
	jsr     _PetAsciiToScreenCode
	ldy     #$00
	jsr     staspidx
	ldy     #$0A
	lda     (sp),y
	clc
	adc     #$01
	jmp     L02C1
L012C:	ldy     #$05
	lda     (sp),y
	ldy     #$0A
L02BF:	sta     (sp),y
	sec
	ldy     #$04
	sbc     (sp),y
	bcc     L0159
	bne     L0157
L0159:	dey
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L015F
	inx
L015F:	jsr     staxysp
	lda     #$20
	ldy     #$00
	sta     (regsave),y
	ldy     #$0A
	lda     (sp),y
	clc
	adc     #$01
	jmp     L02BF
L0157:	dey
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$06
	bcc     L0163
	inx
L0163:	jsr     staxysp
	ldy     #$09
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	jmp     L02B7
L02BE:	lda     __textPos+4
	clc
	adc     #$06
	jsr     pusha
	lda     __textPos+3
	clc
	adc     __screenSize+4
	jsr     _gotoxy
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     __textPos+5
	ldy     #$0D
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ LineBufferToCurrentScreenLine (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_LineBufferToCurrentScreenLine: near

.segment	"CODE"

	jsr     decsp3
	lda     __textPos+2
	sec
	sbc     __textPos+4
	ldy     #$01
	sta     (sp),y
	clc
	adc     __screenSize
	dey
	sta     (sp),y
	lda     #$06
	jsr     pusha
	lda     __textPos+3
	clc
	adc     __screenSize+4
	jsr     _gotoxy
	lda     #$00
	ldy     #$02
L02CE:	sta     (sp),y
	cmp     #$A0
	bcs     L02CD
	lda     (sp),y
	dey
	cmp     (sp),y
	bcc     L0175
	iny
	lda     (sp),y
	sec
	ldy     #$00
	sbc     (sp),y
	bcc     L02CB
	bne     L0175
L02CB:	ldy     #$02
	lda     (sp),y
	sec
	sbc     __textPos+5
	sta     tmp1
	lda     tmp1
	beq     L02CC
	bcs     L017F
L02CC:	lda     (sp),y
	tay
	lda     __lineBuffer,y
	jmp     L02C6
L017F:	lda     #$20
L02C6:	jsr     _cputc
L0175:	ldy     #$02
	lda     (sp),y
	clc
	adc     #$01
	jmp     L02CE
L02CD:	lda     __textPos+4
	clc
	adc     #$06
	jsr     pusha
	lda     __textPos+3
	clc
	adc     __screenSize+4
	jsr     _gotoxy
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ CursorLeft (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CursorLeft: near

.segment	"CODE"

	lda     __textPos+2
	beq     L0191
	dec     __textPos+2
	dec     __textPos+4
	lda     __textPos+4
	cmp     #$FF
	bne     L0191
	lda     #$00
	sta     __textPos+4
	tax
	jmp     _Invalidate
L0191:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ CursorRight (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CursorRight: near

.segment	"CODE"

	lda     __textPos+2
	cmp     __textPos+5
	bcs     L019C
	inc     __textPos+2
	inc     __textPos+4
	lda     __textPos+4
	jsr     pusha0
	lda     __screenSize
	sec
	sbc     #$01
	bcs     L019E
	ldx     #$FF
L019E:	jsr     tosicmp
	bcc     L019C
	beq     L019C
	lda     __screenSize
	sec
	sbc     #$01
	sta     __textPos+4
	ldx     #$00
	txa
	jmp     _Invalidate
L019C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ DeleteLine (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DeleteLine: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp3
	lda     __maxLine
	ora     __maxLine+1
	bne     L02D3
	jmp     incsp5
L02D3:	lda     __maxLine
	ldy     #$03
	cmp     (sp),y
	lda     __maxLine+1
	iny
	sbc     (sp),y
	bcs     L02D4
	jmp     incsp5
L02D4:	lda     __firstFreeSegment
	ora     __firstFreeSegment+1
	beq     L01AA
	lda     __firstFreeSegment
	ldx     __firstFreeSegment+1
	jmp     L02D2
L01AF:	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
L02D2:	ldy     #$01
	jsr     staxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$0B
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cpx     #$00
	bne     L01AF
	cmp     #$00
	bne     L01AF
	ldy     #$04
	jsr     pushwysp
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	ldy     #$08
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	ldy     #$0A
	jsr     staxspidx
	jmp     L01B9
L01AA:	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	ldy     #$06
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sta     __firstFreeSegment+1
	dey
	lda     (ptr1),y
	sta     __firstFreeSegment
L01B9:	ldy     #$03
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	ldx     #$00
L02D1:	lda     (sp),y
	cmp     __maxLine
	txa
	sbc     __maxLine+1
	bcs     L01BE
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	jsr     tosaddax
	jsr     pushax
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L01C9
	inx
L01C9:	jsr     mulax3
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$03
	jsr     _memcpy
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	jmp     L02D1
L01BE:	lda     __maxLine
	ldx     __maxLine+1
	sec
	sbc     #$01
	bcs     L01CB
	dex
L01CB:	sta     __maxLine
	stx     __maxLine+1
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     __textPos+5
	ldx     #$00
	txa
	jsr     _Invalidate
	lda     #$01
	jsr     _GetBufferFromEditorMemoryAndPrint
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ InsertChar (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InsertChar: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp1
	lda     __textPos+2
	cmp     #$A0
	bcc     L02DE
	jmp     incsp2
L02DE:	cmp     __textPos+5
	bne     L01D6
	ldy     #$01
	lda     (sp),y
	ldy     __textPos+2
	sta     __lineBuffer,y
	inc     __textPos+2
	lda     __textPos+4
	jsr     pusha0
	lda     __screenSize
	sec
	sbc     #$01
	bcs     L01DF
	ldx     #$FF
L01DF:	jsr     tosicmp
	beq     L02D8
	bcs     L01DD
L02D8:	ldy     #$01
	lda     (sp),y
	jsr     _cputc
	inc     __textPos+4
	jmp     L02DD
L01DD:	lda     #<(__lineBuffer)
	ldx     #>(__lineBuffer)
	jsr     _Invalidate
	jmp     L02DD
L01D6:	jsr     decsp1
	lda     __textPos+5
	ldy     #$01
	sta     (sp),y
	cmp     #$A0
	bne     L02DA
	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
L02DA:	lda     (sp),y
	dey
	sta     (sp),y
	ldx     #$00
L02DC:	lda     (sp),y
	clc
	adc     #$01
	bcc     L02D7
	inx
	clc
L02D7:	adc     #<(__lineBuffer)
	tay
	txa
	adc     #>(__lineBuffer)
	tax
	tya
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	tay
	lda     __lineBuffer,y
	ldy     #$00
	jsr     staspidx
	ldy     #$00
	lda     (sp),y
	cmp     __textPos+2
	beq     L01ED
	ldx     #$00
	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
	jmp     L02DC
L01ED:	ldy     #$02
	lda     (sp),y
	ldy     __textPos+2
	sta     __lineBuffer,y
	jsr     _LineBufferToCurrentScreenLine
	jsr     incsp1
L02DD:	inc     __textPos+5
	jsr     _CursorRight
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ DeleteChar (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DeleteChar: near

.segment	"CODE"

	jsr     decsp1
	ldx     #$00
	lda     __textPos+2
	cmp     __textPos+5
	bcs     L0203
	ldy     #$00
L02E2:	sta     (sp),y
	cmp     __textPos+5
	bcs     L02E1
	lda     #<(__lineBuffer)
	ldx     #>(__lineBuffer)
	clc
	adc     (sp),y
	bcc     L020F
	inx
L020F:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0212
	inx
L0212:	sta     ptr1
	txa
	clc
	adc     #>(__lineBuffer)
	sta     ptr1+1
	ldy     #<(__lineBuffer)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	jmp     L02E2
L02E1:	lda     __textPos+5
	sec
	sbc     #$01
	bcs     L0215
	dex
L0215:	clc
	adc     #<(__lineBuffer)
	sta     ptr1
	txa
	adc     #>(__lineBuffer)
	sta     ptr1+1
	lda     #$20
	sta     (ptr1),y
	dec     __textPos+5
	jsr     _LineBufferToCurrentScreenLine
L0203:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ Backspace (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Backspace: near

.segment	"CODE"

	lda     __textPos+2
	beq     L021B
	jsr     _CursorLeft
	jmp     _DeleteChar
L021B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ CursorUp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CursorUp: near

.segment	"CODE"

	lda     __textPos
	ora     __textPos+1
	beq     L0220
	jsr     _SaveBufferToEditorMemory
	lda     __textPos
	ldx     __textPos+1
	sec
	sbc     #$01
	bcs     L0226
	dex
L0226:	sta     __textPos
	stx     __textPos+1
	ldx     #$00
	lda     __textPos+3
	cmp     __screenSize+4
	txa
	bcc     L02E5
	dec     __textPos+3
	jmp     L022A
L02E5:	jsr     _Invalidate
L022A:	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     __textPos+5
	tya
	jsr     _GetBufferFromEditorMemoryAndPrint
	lda     __textPos+4
	jsr     pusha
	lda     __textPos+3
	clc
	adc     __screenSize+4
	jmp     _gotoxy
L0220:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ CursorDown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CursorDown: near

.segment	"CODE"

	lda     __maxLine
	ldx     __maxLine+1
	cpx     __textPos+1
	bne     L02EB
	cmp     __textPos
	beq     L0235
L02EB:	jsr     _SaveBufferToEditorMemory
	lda     __textPos
	ldx     __textPos+1
	clc
	adc     #$01
	bcc     L023A
	inx
L023A:	sta     __textPos
	stx     __textPos+1
	ldx     #$00
	lda     __textPos+3
	sec
	sbc     __screenSize+1
	sta     tmp1
	lda     tmp1
	beq     L02E9
	bcs     L02EA
L02E9:	inc     __textPos+3
	jmp     L023E
L02EA:	txa
	jsr     _Invalidate
L023E:	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     __textPos+5
	tya
	jsr     _GetBufferFromEditorMemoryAndPrint
	lda     __textPos+4
	jsr     pusha
	lda     __textPos+3
	clc
	adc     __screenSize+4
	jmp     _gotoxy
L0235:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ HandleReturnKey (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_HandleReturnKey: near

.segment	"CODE"

	lda     __maxLine
	ldx     __maxLine+1
	cpx     __textPos+1
	bne     L024A
	cmp     __textPos
	bne     L024A
	jsr     _SaveBufferToEditorMemory
	lda     __maxLine
	ldx     __maxLine+1
	clc
	adc     #$01
	bcc     L024E
	inx
L024E:	sta     __maxLine
	stx     __maxLine+1
	lda     __textPos
	ldx     __textPos+1
	clc
	adc     #$01
	bcc     L0250
	inx
L0250:	sta     __textPos
	stx     __textPos+1
	lda     #$00
	sta     __textPos+4
	sta     __textPos+2
	sta     __textPos+5
	tax
	lda     __textPos+3
	cmp     __screenSize+2
	txa
	bcs     L02EE
	inc     __textPos+3
	jmp     _PrintLineNumber
L02EE:	jsr     _Invalidate
	jmp     _PrintLineNumber
L024A:	lda     #$00
	sta     __textPos+4
	sta     __textPos+2
	jmp     _CursorDown

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	jsr     decsp1
	jsr     _Initialize
	jsr     _PrintLineNumber
L0267:	jsr     decsp4
	lda     __textPos
	ldy     #$02
	sta     (sp),y
	iny
	lda     __textPos+1
	sta     (sp),y
	lda     __textPos+2
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	jsr     _UpdateDocInfo
	jsr     _cgetc
	ldy     #$00
	sta     (sp),y
	cmp     #$0D
	bne     L02F0
	jsr     _HandleReturnKey
	jmp     L0294
L02F0:	lda     (sp),y
	cmp     #$14
	bne     L02F2
	jsr     _Backspace
	jmp     L0294
L02F2:	lda     (sp),y
	cmp     #$94
	bne     L02F4
	jsr     _DeleteChar
	jmp     L0294
L02F4:	lda     (sp),y
	cmp     #$05
	bne     L02F6
	lda     __textPos
	cmp     __maxLine
	lda     __textPos+1
	sbc     __maxLine+1
	bcs     L02FF
	lda     __textPos
	ldx     __textPos+1
	jsr     _DeleteLine
	jmp     L0294
L02F6:	lda     (sp),y
	cmp     #$11
	bne     L02F8
	jsr     _CursorDown
	jmp     L0294
L02F8:	lda     (sp),y
	cmp     #$91
	bne     L02FA
	lda     __textPos+3
	beq     L02FF
	jsr     _CursorUp
	jmp     L0294
L02FA:	lda     (sp),y
	cmp     #$9D
	bne     L02FC
	jsr     _CursorLeft
	jmp     L0294
L02FC:	lda     (sp),y
	cmp     #$1D
	bne     L02FD
	jsr     _CursorRight
	jmp     L0294
L02FD:	lda     (sp),y
	jsr     _InsertChar
L0294:	ldy     #$00
L02FF:	lda     (sp),y
	cmp     #$03
	jne     L0267
	jmp     incsp1

.endproc

