;
; File generated by cc65 v 2.18 - Git f8be35b
;
	.fopt		compiler,"cc65 v 2.18 - Git f8be35b"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_realloc
	.import		_printf
	.import		_clrscr
	.import		_gotoxy
	.import		_cputc
	.import		_cgetc
	.import		_cursor
	.import		_screensize
	.import		_SomeMethod
	.export		__lineBuffer
	.export		__workingLineBuffer
	.export		__editorLines
	.export		__editorLinesCapacity
	.export		__editorLineSegments
	.export		__firstFreeSegment
	.export		__maxLineSegment
	.export		__textPos
	.export		__screenSize
	.export		__statusBarLineNo
	.export		__debugLineNo
	.export		__maxLine
	.export		_DebugPrint
	.export		_DebugPrintSlow
	.export		_UpdateDocInfo
	.export		_EnsureEditorLinesCapacity
	.export		_Initialize
	.export		_PrintLineNumber
	.export		_GetNextFreeLineSegment
	.export		_SaveBufferToEditorMemory
	.export		_GetBufferFromEditorMemoryAndPrint
	.export		_GetWorkingLine
	.export		_Invalidate
	.export		_LineBufferToCurrentScreenLine
	.export		_CursorLeft
	.export		_CursorRight
	.export		_DeleteLine
	.export		_InsertChar
	.export		_DeleteChar
	.export		_Backspace
	.export		_CursorUp
	.export		_CursorDown
	.export		_HandleReturnKey
	.export		_main

.segment	"RODATA"

L0038:
	.byte	$CC,$49,$4E,$45,$53,$2D,$2A,$3A,$20,$25,$D8,$2F,$25,$D8,$00
L002F:
	.byte	$C3,$3A,$20,$25,$30,$33,$44,$00
L0028:
	.byte	$CC,$3A,$20,$25,$30,$35,$44,$00
L0139:
	.byte	$25,$30,$34,$44,$3A,$00
L007E	:=	L0139+0

.segment	"BSS"

__lineBuffer:
	.res	255,$00
__workingLineBuffer:
	.res	255,$00
__editorLines:
	.res	2,$00
__editorLinesCapacity:
	.res	2,$00
__editorLineSegments:
	.res	2,$00
__firstFreeSegment:
	.res	2,$00
__maxLineSegment:
	.res	2,$00
__textPos:
	.res	6,$00
__screenSize:
	.res	5,$00
__statusBarLineNo:
	.res	1,$00
__debugLineNo:
	.res	1,$00
__maxLine:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ DebugPrint (__near__ const unsigned char *, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DebugPrint: near

.segment	"CODE"

	jsr     pushax
	lda     #$01
	jsr     pusha
	lda     __debugLineNo
	jsr     _gotoxy
	ldy     #$05
	jsr     pushwysp
	ldy     #$05
	jsr     pushwysp
	ldy     #$04
	jsr     _printf
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ DebugPrintSlow (__near__ const unsigned char *, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DebugPrintSlow: near

.segment	"CODE"

	jsr     pushax
	lda     #$01
	jsr     pusha
	lda     __debugLineNo
	jsr     _gotoxy
	ldy     #$05
	jsr     pushwysp
	ldy     #$05
	jsr     pushwysp
	ldy     #$04
	jsr     _printf
	jsr     _SomeMethod
	ldy     #$00
	tya
	sta     (sp),y
	iny
	sta     (sp),y
L0018:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$20
	txa
	sbc     #$4E
	bvc     L001F
	eor     #$80
L001F:	bpl     L0019
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0021
	inx
L0021:	jsr     stax0sp
	jmp     L0018
L0019:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ UpdateDocInfo (int, int, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateDocInfo: near

.segment	"CODE"

	jsr     pusha
	lda     __editorLineSegments
	ldx     __editorLineSegments+1
	jsr     pushax
	lda     #$01
	jsr     pusha
	lda     __statusBarLineNo
	jsr     _gotoxy
	lda     #<(L0028)
	ldx     #>(L0028)
	jsr     pushax
	ldy     #$0A
	jsr     pushwysp
	ldy     #$04
	jsr     _printf
	lda     #$0A
	jsr     pusha
	lda     __statusBarLineNo
	jsr     _gotoxy
	lda     #<(L002F)
	ldx     #>(L002F)
	jsr     pushax
	ldy     #$08
	jsr     pushwysp
	ldy     #$04
	jsr     _printf
	lda     #$10
	jsr     pusha
	lda     __statusBarLineNo
	jsr     _gotoxy
	lda     __maxLineSegment
	ldx     __maxLineSegment+1
	jsr     pushax
	lda     #$0C
	jsr     tosumula0
	jsr     addeq0sp
	lda     #<(L0038)
	ldx     #>(L0038)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	lda     __firstFreeSegment
	ldx     __firstFreeSegment+1
	jsr     pushax
	ldy     #$06
	jsr     _printf
	lda     __textPos+4
	clc
	adc     #$06
	jsr     pusha
	lda     __textPos+3
	clc
	adc     __screenSize+2
	jsr     _gotoxy
	jmp     incsp7

.endproc

; ---------------------------------------------------------------
; void __near__ EnsureEditorLinesCapacity (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_EnsureEditorLinesCapacity: near

.segment	"CODE"

	jsr     pusha
	lda     __maxLine
	sec
	sbc     __editorLinesCapacity
	sta     tmp1
	lda     __maxLine+1
	sbc     __editorLinesCapacity+1
	ora     tmp1
	beq     L027E
	bcs     L0280
L027E:	ldy     #$00
	lda     (sp),y
	cmp     #$01
	jne     incsp1
L0280:	lda     __editorLinesCapacity
	clc
	adc     __editorLinesCapacity
	sta     __editorLinesCapacity
	lda     __editorLinesCapacity+1
	adc     __editorLinesCapacity+1
	sta     __editorLinesCapacity+1
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __editorLinesCapacity
	ldx     __editorLinesCapacity+1
	jsr     mulax3
	jsr     _realloc
	sta     __editorLines
	stx     __editorLines+1
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ Initialize (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Initialize: near

.segment	"CODE"

	ldx     #$00
	txa
	sta     __maxLine
	sta     __maxLine+1
	sta     __textPos+2
	sta     __textPos
	sta     __textPos+1
	sta     __textPos+4
	sta     __textPos+3
	lda     #$04
	sta     __editorLinesCapacity
	stx     __editorLinesCapacity+1
	lda     #$01
	jsr     _EnsureEditorLinesCapacity
	lda     #<(__screenSize)
	ldx     #>(__screenSize)
	jsr     pushax
	lda     #<(__screenSize+1)
	ldx     #>(__screenSize+1)
	jsr     _screensize
	lda     __screenSize
	sec
	sbc     #$06
	bcs     L0282
	sec
L0282:	sbc     #$01
	sta     __screenSize
	lda     __screenSize+1
	sec
	sbc     #$01
	sta     __statusBarLineNo
	lda     #$01
	sta     __screenSize+2
	lda     __screenSize+1
	sec
	sbc     #$02
	sta     __screenSize+3
	sec
	sbc     __screenSize+2
	sta     __screenSize+4
	lda     __screenSize+1
	sec
	sbc     #$02
	sta     __debugLineNo
	jsr     _clrscr
	lda     #$01
	jsr     _cursor
	lda     #$00
	sta     __maxLineSegment
	sta     __maxLineSegment+1
	ldx     #$C0
	sta     __editorLineSegments
	stx     __editorLineSegments+1
	sta     __firstFreeSegment
	sta     __firstFreeSegment+1
	lda     #$06
	jsr     pusha
	lda     __textPos+3
	clc
	adc     __screenSize+2
	jmp     _gotoxy

.endproc

; ---------------------------------------------------------------
; void __near__ PrintLineNumber (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_PrintLineNumber: near

.segment	"CODE"

	lda     #$00
	jsr     pusha
	lda     __textPos+3
	clc
	adc     __screenSize+2
	jsr     _gotoxy
	lda     #<(L007E)
	ldx     #>(L007E)
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	clc
	adc     #$01
	bcc     L0081
	inx
L0081:	jsr     pushax
	ldy     #$04
	jmp     _printf

.endproc

; ---------------------------------------------------------------
; __near__ struct LineSegment * __near__ GetNextFreeLineSegment (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetNextFreeLineSegment: near

.segment	"CODE"

	jsr     decsp2
	lda     __firstFreeSegment
	ora     __firstFreeSegment+1
	bne     L0083
	lda     __editorLineSegments
	ldx     __editorLineSegments+1
	jsr     pushax
	lda     __maxLineSegment
	ldx     __maxLineSegment+1
	jsr     pushax
	lda     #$0C
	jsr     tosmula0
	jsr     tosaddax
	jsr     stax0sp
	lda     __maxLineSegment
	ldx     __maxLineSegment+1
	clc
	adc     #$01
	bcc     L0089
	inx
L0089:	sta     __maxLineSegment
	stx     __maxLineSegment+1
	jmp     L008A
L0083:	lda     __firstFreeSegment
	ldx     __firstFreeSegment+1
	jsr     stax0sp
	lda     __firstFreeSegment+1
	sta     ptr1+1
	lda     __firstFreeSegment
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	sta     __firstFreeSegment+1
	dey
	lda     (ptr1),y
	sta     __firstFreeSegment
L008A:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ SaveBufferToEditorMemory (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SaveBufferToEditorMemory: near

.segment	"CODE"

	jsr     decsp6
	lda     #$00
	jsr     _EnsureEditorLinesCapacity
	jsr     _GetNextFreeLineSegment
	jsr     stax0sp
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	iny
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	lda     #$00
	ldy     #$05
	sta     (sp),y
	dey
L0286:	sta     (sp),y
	cmp     __textPos+5
	bcs     L009B
	iny
	lda     (sp),y
	cmp     #$0A
	bne     L00A2
	jsr     _GetNextFreeLineSegment
	ldy     #$02
	jsr     staxysp
	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$0A
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     stax0sp
	lda     #$00
	ldy     #$05
	sta     (sp),y
L00A2:	jsr     pushw0sp
	ldy     #$07
	lda     (sp),y
	pha
	clc
	adc     #$01
	sta     (sp),y
	pla
	jsr     tosadda0
	jsr     pushax
	ldy     #$06
	lda     (sp),y
	tay
	lda     __lineBuffer,y
	ldy     #$00
	jsr     staspidx
	ldy     #$04
	lda     (sp),y
	clc
	adc     #$01
	jmp     L0286
L009B:	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	lda     __textPos+5
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	tya
	ldy     #$0A
	sta     (ptr1),y
	iny
	sta     (ptr1),y
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ GetBufferFromEditorMemoryAndPrint (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetBufferFromEditorMemoryAndPrint: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp8
	ldy     #$08
	lda     (sp),y
	jne     L028A
	lda     __firstFreeSegment
	ora     __firstFreeSegment+1
	beq     L00B9
	lda     __firstFreeSegment
	ldx     __firstFreeSegment+1
	jmp     L028F
L00BE:	ldy     #$05
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
L028F:	ldy     #$04
	jsr     staxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$0B
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cpx     #$00
	bne     L00BE
	cmp     #$00
	bne     L00BE
	ldy     #$07
	jsr     pushwysp
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	ldy     #$0A
	jsr     staxspidx
	jmp     L028A
L00B9:	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sta     __firstFreeSegment+1
	dey
	lda     (ptr1),y
	sta     __firstFreeSegment
L028A:	lda     __textPos+2
	sec
	sbc     __textPos+4
	ldy     #$00
	sta     (sp),y
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	ldy     #$06
	jsr     staxysp
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$03
	sta     (sp),y
	sta     __textPos+5
	lda     #$00
	dey
	sta     (sp),y
	lda     #$06
	jsr     pusha
	lda     __textPos+3
	clc
	adc     __screenSize+2
	jsr     _gotoxy
	lda     #$00
	ldy     #$01
L0290:	sta     (sp),y
	cmp     #$FF
	jcs     L00DC
	lda     (sp),y
	ldy     #$03
	cmp     (sp),y
	bcs     L00E3
	lda     #<(__lineBuffer)
	ldx     #>(__lineBuffer)
	ldy     #$01
	clc
	adc     (sp),y
	bcc     L00E7
	inx
L00E7:	jsr     pushax
	ldy     #$0B
	jsr     pushwysp
	ldy     #$06
	lda     (sp),y
	pha
	clc
	adc     #$01
	sta     (sp),y
	pla
	jsr     tosadda0
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     staspidx
	ldy     #$02
	lda     (sp),y
	cmp     #$0A
	bne     L00F0
	ldy     #$07
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	ldy     #$06
	jsr     staxysp
	lda     #$00
	ldy     #$02
	sta     (sp),y
	jmp     L00F0
L00E3:	ldy     #$01
	lda     (sp),y
	tay
	lda     #$20
	sta     __lineBuffer,y
L00F0:	ldy     #$01
	lda     (sp),y
	dey
	cmp     (sp),y
	bcc     L00DD
	iny
	lda     (sp),y
	jsr     pusha0
	ldy     #$02
	lda     (sp),y
	clc
	adc     __screenSize
	bcc     L0288
	ldx     #$01
L0288:	jsr     tosicmp
	bcc     L00F6
	bne     L00DD
L00F6:	ldy     #$01
	lda     (sp),y
	tay
	lda     __lineBuffer,y
	jsr     _cputc
L00DD:	ldy     #$01
	lda     (sp),y
	clc
	adc     #$01
	jmp     L0290
L00DC:	ldy     #$09
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ GetWorkingLine (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetWorkingLine: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp5
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	ldy     #$08
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     stax0sp
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	ldy     #$08
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$03
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	ldy     #$04
L0293:	sta     (sp),y
	cmp     #$FF
	bcs     L0108
	lda     (sp),y
	dey
	cmp     (sp),y
	bcs     L010F
	lda     #<(__workingLineBuffer)
	ldx     #>(__workingLineBuffer)
	iny
	clc
	adc     (sp),y
	bcc     L0113
	inx
L0113:	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	ldy     #$06
	lda     (sp),y
	pha
	clc
	adc     #$01
	sta     (sp),y
	pla
	jsr     tosadda0
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     staspidx
	ldy     #$02
	lda     (sp),y
	cmp     #$0A
	bne     L0109
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     stax0sp
	lda     #$00
	ldy     #$02
	sta     (sp),y
	jmp     L0109
L010F:	iny
	lda     (sp),y
	tay
	lda     #$20
	sta     __workingLineBuffer,y
L0109:	ldy     #$04
	lda     (sp),y
	clc
	adc     #$01
	jmp     L0293
L0108:	dey
	lda     (sp),y
	ldx     #$00
	jmp     incsp7

.endproc

; ---------------------------------------------------------------
; void __near__ Invalidate (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Invalidate: near

.segment	"CODE"

	jsr     decsp7
	lda     __textPos+2
	sec
	sbc     __textPos+4
	ldy     #$01
	sta     (sp),y
	clc
	adc     __screenSize
	dey
	sta     (sp),y
	lda     __textPos
	sec
	sbc     __textPos+3
	pha
	lda     __textPos+1
	sbc     #$00
	pla
	ldy     #$04
	sta     (sp),y
	clc
	adc     __screenSize+4
	dey
	sta     (sp),y
	iny
	lda     (sp),y
	iny
	sta     (sp),y
	ldx     #$00
L029B:	lda     (sp),y
	ldy     #$03
	cmp     (sp),y
	jcs     L02A6
	ldy     #$05
	lda     (sp),y
	sec
	sbc     __maxLine
	sta     tmp1
	txa
	sbc     __maxLine+1
	ora     tmp1
	beq     L029C
	jcs     L0133
	txa
L029C:	jsr     pusha
	ldy     #$06
	lda     (sp),y
	clc
	adc     __screenSize+2
	jsr     _gotoxy
	lda     #<(L0139)
	ldx     #>(L0139)
	jsr     pushax
	ldy     #$07
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L013C
	inx
L013C:	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #$06
	jsr     pusha
	tay
	lda     (sp),y
	clc
	adc     __screenSize+2
	jsr     _gotoxy
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	cmp     __maxLine
	txa
	sbc     __maxLine+1
	bcs     L02A5
	lda     (sp),y
	jsr     _GetWorkingLine
	ldy     #$02
	sta     (sp),y
	lda     #$00
	ldy     #$06
L02A7:	sta     (sp),y
	cmp     #$FF
	bcs     L012D
	lda     (sp),y
	ldy     #$01
	cmp     (sp),y
	bcc     L0147
	ldy     #$06
	lda     (sp),y
	sec
	ldy     #$00
	sbc     (sp),y
	bcc     L02A1
	bne     L0147
L02A1:	ldy     #$06
	lda     (sp),y
	tay
	lda     __workingLineBuffer,y
	jsr     _cputc
L0147:	ldy     #$06
	lda     (sp),y
	clc
	adc     #$01
	jmp     L02A7
L0133:	ldy     #$01
	lda     (sp),y
	ldy     #$06
L02A8:	sta     (sp),y
	sec
	ldy     #$00
	sbc     (sp),y
	bcc     L0159
	bne     L012D
L0159:	lda     #$20
	jsr     _cputc
	ldy     #$06
	lda     (sp),y
	clc
	adc     #$01
	jmp     L02A8
L012D:	ldy     #$05
	ldx     #$00
L02A5:	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	jmp     L029B
L02A6:	lda     __textPos+4
	clc
	adc     #$06
	jsr     pusha
	lda     __textPos+3
	clc
	adc     __screenSize+2
	jsr     _gotoxy
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     __textPos+5
	jmp     incsp7

.endproc

; ---------------------------------------------------------------
; void __near__ LineBufferToCurrentScreenLine (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_LineBufferToCurrentScreenLine: near

.segment	"CODE"

	jsr     decsp3
	lda     __textPos+2
	sec
	sbc     __textPos+4
	ldy     #$01
	sta     (sp),y
	clc
	adc     __screenSize
	dey
	sta     (sp),y
	lda     #$06
	jsr     pusha
	lda     __textPos+3
	clc
	adc     __screenSize+2
	jsr     _gotoxy
	lda     #$00
	ldy     #$02
L02B5:	sta     (sp),y
	cmp     #$FF
	bcs     L02B4
	lda     (sp),y
	dey
	cmp     (sp),y
	bcc     L0171
	iny
	lda     (sp),y
	sec
	ldy     #$00
	sbc     (sp),y
	bcc     L02B2
	bne     L0171
L02B2:	ldy     #$02
	lda     (sp),y
	sec
	sbc     __textPos+5
	sta     tmp1
	lda     tmp1
	beq     L02B3
	bcs     L017B
L02B3:	lda     (sp),y
	tay
	lda     __lineBuffer,y
	jmp     L02AD
L017B:	lda     #$20
L02AD:	jsr     _cputc
L0171:	ldy     #$02
	lda     (sp),y
	clc
	adc     #$01
	jmp     L02B5
L02B4:	lda     __textPos+4
	clc
	adc     #$06
	jsr     pusha
	lda     __textPos+3
	clc
	adc     __screenSize+2
	jsr     _gotoxy
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ CursorLeft (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CursorLeft: near

.segment	"CODE"

	lda     __textPos+2
	beq     L018D
	dec     __textPos+2
	dec     __textPos+4
	lda     __textPos+4
	cmp     #$FF
	bne     L018D
	lda     #$00
	sta     __textPos+4
L018D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ CursorRight (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CursorRight: near

.segment	"CODE"

	lda     __textPos+2
	cmp     __textPos+5
	bcs     L0196
	inc     __textPos+2
	inc     __textPos+4
	lda     __textPos+4
	jsr     pusha0
	lda     __screenSize
	sec
	sbc     #$01
	bcs     L0198
	ldx     #$FF
L0198:	jsr     tosicmp
	bcc     L0196
	beq     L0196
	lda     __screenSize
	sec
	sbc     #$01
	sta     __textPos+4
L0196:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ DeleteLine (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DeleteLine: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp3
	lda     __maxLine
	ora     __maxLine+1
	bne     L02BA
	jmp     incsp5
L02BA:	lda     __maxLine
	ldy     #$03
	cmp     (sp),y
	lda     __maxLine+1
	iny
	sbc     (sp),y
	bcs     L02BB
	jmp     incsp5
L02BB:	lda     __firstFreeSegment
	ora     __firstFreeSegment+1
	beq     L01A2
	lda     __firstFreeSegment
	ldx     __firstFreeSegment+1
	jmp     L02B9
L01A7:	ldy     #$02
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
L02B9:	ldy     #$01
	jsr     staxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$0B
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cpx     #$00
	bne     L01A7
	cmp     #$00
	bne     L01A7
	ldy     #$04
	jsr     pushwysp
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	ldy     #$08
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	ldy     #$0A
	jsr     staxspidx
	jmp     L01B1
L01A2:	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	ldy     #$06
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	sta     __firstFreeSegment+1
	dey
	lda     (ptr1),y
	sta     __firstFreeSegment
L01B1:	ldy     #$03
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	ldx     #$00
L02B8:	lda     (sp),y
	cmp     __maxLine
	txa
	sbc     __maxLine+1
	bcs     L01B6
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	jsr     tosaddax
	jsr     pushax
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L01C1
	inx
L01C1:	jsr     mulax3
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$03
	jsr     _memcpy
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	jmp     L02B8
L01B6:	lda     __maxLine
	ldx     __maxLine+1
	sec
	sbc     #$01
	bcs     L01C3
	dex
L01C3:	sta     __maxLine
	stx     __maxLine+1
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     __textPos+5
	jsr     _Invalidate
	lda     #$01
	jsr     _GetBufferFromEditorMemoryAndPrint
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ InsertChar (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InsertChar: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp1
	lda     __textPos+2
	cmp     #$FF
	bcc     L02C4
	jmp     incsp2
L02C4:	cmp     __textPos+5
	bne     L01CD
	ldy     #$01
	lda     (sp),y
	ldy     __textPos+2
	sta     __lineBuffer,y
	inc     __textPos+2
	lda     __textPos+4
	cmp     __screenSize
	bcs     L02C3
	ldy     #$01
	lda     (sp),y
	jsr     _cputc
	inc     __textPos+4
	jmp     L02C3
L01CD:	jsr     decsp1
	lda     __textPos+5
	ldy     #$01
	sta     (sp),y
	cmp     #$FF
	bne     L02C0
	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
L02C0:	lda     (sp),y
	dey
	sta     (sp),y
	ldx     #$00
L02C2:	lda     (sp),y
	clc
	adc     #$01
	bcc     L02BE
	inx
	clc
L02BE:	adc     #<(__lineBuffer)
	tay
	txa
	adc     #>(__lineBuffer)
	tax
	tya
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	tay
	lda     __lineBuffer,y
	ldy     #$00
	jsr     staspidx
	ldy     #$00
	lda     (sp),y
	cmp     __textPos+2
	beq     L01E0
	ldx     #$00
	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
	jmp     L02C2
L01E0:	ldy     #$02
	lda     (sp),y
	ldy     __textPos+2
	sta     __lineBuffer,y
	jsr     _LineBufferToCurrentScreenLine
	jsr     incsp1
L02C3:	inc     __textPos+5
	jsr     _CursorRight
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ DeleteChar (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DeleteChar: near

.segment	"CODE"

	jsr     decsp1
	ldx     #$00
	lda     __textPos+2
	cmp     __textPos+5
	bcs     L01F6
	ldy     #$00
L02C8:	sta     (sp),y
	cmp     __textPos+5
	bcs     L02C7
	lda     #<(__lineBuffer)
	ldx     #>(__lineBuffer)
	clc
	adc     (sp),y
	bcc     L0202
	inx
L0202:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0205
	inx
L0205:	sta     ptr1
	txa
	clc
	adc     #>(__lineBuffer)
	sta     ptr1+1
	ldy     #<(__lineBuffer)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	jmp     L02C8
L02C7:	lda     __textPos+5
	sec
	sbc     #$01
	bcs     L0208
	dex
L0208:	clc
	adc     #<(__lineBuffer)
	sta     ptr1
	txa
	adc     #>(__lineBuffer)
	sta     ptr1+1
	lda     #$20
	sta     (ptr1),y
	dec     __textPos+5
	jsr     _LineBufferToCurrentScreenLine
L01F6:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ Backspace (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Backspace: near

.segment	"CODE"

	lda     __textPos+2
	beq     L020E
	jsr     _CursorLeft
	jmp     _DeleteChar
L020E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ CursorUp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CursorUp: near

.segment	"CODE"

	jsr     _SaveBufferToEditorMemory
	lda     __textPos
	ldx     __textPos+1
	sec
	sbc     #$01
	bcs     L0216
	dex
L0216:	sta     __textPos
	stx     __textPos+1
	dec     __textPos+3
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     __textPos+5
	tya
	jsr     _GetBufferFromEditorMemoryAndPrint
	lda     __textPos+4
	jsr     pusha
	lda     __textPos+3
	clc
	adc     __screenSize+2
	jmp     _gotoxy

.endproc

; ---------------------------------------------------------------
; void __near__ CursorDown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CursorDown: near

.segment	"CODE"

	lda     __maxLine
	ldx     __maxLine+1
	cpx     __textPos+1
	bne     L02CC
	cmp     __textPos
	beq     L0220
L02CC:	jsr     _SaveBufferToEditorMemory
	lda     __textPos
	ldx     __textPos+1
	clc
	adc     #$01
	bcc     L0225
	inx
L0225:	sta     __textPos
	stx     __textPos+1
	inc     __textPos+3
	lda     __editorLines
	ldx     __editorLines+1
	jsr     pushax
	lda     __textPos
	ldx     __textPos+1
	jsr     mulax3
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     __textPos+5
	tya
	jsr     _GetBufferFromEditorMemoryAndPrint
	lda     __textPos+4
	jsr     pusha
	lda     __textPos+3
	clc
	adc     __screenSize+2
	jmp     _gotoxy
L0220:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ HandleReturnKey (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_HandleReturnKey: near

.segment	"CODE"

	lda     __maxLine
	ldx     __maxLine+1
	cpx     __textPos+1
	bne     L0230
	cmp     __textPos
	bne     L0230
	jsr     _SaveBufferToEditorMemory
	lda     __maxLine
	ldx     __maxLine+1
	clc
	adc     #$01
	bcc     L0234
	inx
L0234:	sta     __maxLine
	stx     __maxLine+1
	lda     __textPos
	ldx     __textPos+1
	clc
	adc     #$01
	bcc     L0236
	inx
L0236:	sta     __textPos
	stx     __textPos+1
	lda     #$00
	sta     __textPos+4
	sta     __textPos+2
	sta     __textPos+5
	lda     __textPos+3
	cmp     __screenSize+1
	bcs     L023D
	inc     __textPos+3
	jmp     _PrintLineNumber
L023D:	jsr     _Invalidate
	jmp     _PrintLineNumber
L0230:	lda     #$00
	sta     __textPos+4
	sta     __textPos+2
	jmp     _CursorDown

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	jsr     decsp1
	jsr     _Initialize
	jsr     _PrintLineNumber
L024C:	jsr     decsp4
	lda     __textPos
	ldy     #$02
	sta     (sp),y
	iny
	lda     __textPos+1
	sta     (sp),y
	lda     __textPos+2
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	jsr     _UpdateDocInfo
	jsr     _cgetc
	ldy     #$00
	sta     (sp),y
	cmp     #$0D
	bne     L02CF
	jsr     _HandleReturnKey
	jmp     L0279
L02CF:	lda     (sp),y
	cmp     #$14
	bne     L02D1
	jsr     _Backspace
	jmp     L0279
L02D1:	lda     (sp),y
	cmp     #$94
	bne     L02D3
	jsr     _DeleteChar
	jmp     L0279
L02D3:	lda     (sp),y
	cmp     #$05
	bne     L02D5
	lda     __textPos
	cmp     __maxLine
	lda     __textPos+1
	sbc     __maxLine+1
	bcs     L02DE
	lda     __textPos
	ldx     __textPos+1
	jsr     _DeleteLine
	jmp     L0279
L02D5:	lda     (sp),y
	cmp     #$11
	bne     L02D7
	jsr     _CursorDown
	jmp     L0279
L02D7:	lda     (sp),y
	cmp     #$91
	bne     L02D9
	lda     __textPos+3
	beq     L02DE
	jsr     _CursorUp
	jmp     L0279
L02D9:	lda     (sp),y
	cmp     #$9D
	bne     L02DB
	jsr     _CursorLeft
	jmp     L0279
L02DB:	lda     (sp),y
	cmp     #$1D
	bne     L02DC
	jsr     _CursorRight
	jmp     L0279
L02DC:	lda     (sp),y
	jsr     _InsertChar
L0279:	ldy     #$00
L02DE:	lda     (sp),y
	cmp     #$03
	jne     L024C
	jmp     incsp1

.endproc

